name: Deploy to AWS (env3)
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy_env3:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Needs to create the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets in the repository settings
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install or Update AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          # Run the installer with --update
          sudo ./aws/install --update
          aws --version

      # 4) Criar bucket S3 (env3)
      - name: Create S3 bucket
        run: |
          aws s3api create-bucket --bucket cicdproj-calls-env3 --region us-east-1

      # 5) Criar "pastas" (prefixes) no S3
      - name: Create S3 prefixes
        run: |
          aws s3api put-object --bucket cicdproj-calls-env3 --key landing_zone/
          aws s3api put-object --bucket cicdproj-calls-env3 --key processed/

      - name: Create DynamoDB table if not exists
        run: |
          if aws dynamodb describe-table --table-name cicdproj_calls_bronze_env3; then
            echo "Table cicdproj_calls_bronze_env3 already exists. Skipping creation."
          else
            echo "Table does not exist. Creating now..."
            aws dynamodb create-table \
              --table-name cicdproj_calls_bronze_env3 \
              --attribute-definitions AttributeName=ip,AttributeType=S AttributeName=timestamp,AttributeType=N \
              --key-schema AttributeName=ip,KeyType=HASH AttributeName=timestamp,KeyType=RANGE \
              --billing-mode PAY_PER_REQUEST \
              --region us-east-1
          fi



      # 8) Create or update the Lambda function
      - name: Deploy Lambda function (create or update)
        run: |
          FUNCTION_NAME="cicdproj_calls_bronze_env3"
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating Lambda code for $FUNCTION_NAME ..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://data/bronze/function.zip \
              --region us-east-1
            # If you ever need to update config (e.g. handler, runtime, env vars), you can also run:
            # aws lambda update-function-configuration ...
          else
            echo "Creating Lambda function $FUNCTION_NAME ..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.12 \
              --role arn:aws:iam::599224842127:role/lambda-exec-role-s3-dynamo \
              --handler data.bronze.handler.lambda_handler \
              --zip-file fileb://data/bronze/function.zip \
              --region us-east-1
          fi



      # 9) Configurar notificação do S3 para chamar a Lambda
      # Needs to add Lambda resource Policy to allow S3 to invoke it
      - name: Remove existing permission if it exists
        run: |
          # This command will fail if the statement doesn't exist; we ignore the error with `|| true`.
          aws lambda remove-permission \
            --function-name cicdproj_calls_bronze_env3 \
            --statement-id s3notification \
            --region us-east-1 || true
            
      - name: Configure S3 Notification
        run: |
          # 1) Give S3 permission to invoke the Lambda
          aws lambda add-permission \
            --function-name cicdproj_calls_bronze_env3 \
            --principal s3.amazonaws.com \
            --action lambda:InvokeFunction \
            --statement-id s3notification \
            --source-arn arn:aws:s3:::cicdproj-calls-env3 \
            --source-account 599224842127 \
            --region us-east-1

          # 2) Create notification configuration JSON
          cat <<EOF > notification_env3.json
          {
            "LambdaFunctionConfigurations": [
              {
                "Id": "cicdproj-calls-env3-notification",
                "LambdaFunctionArn": "arn:aws:lambda:us-east-1:599224842127:function:cicdproj_calls_bronze_env3",
                "Events": ["s3:ObjectCreated:*"],
                "Filter": {
                  "Key": {
                    "FilterRules": [
                      { "Name": "prefix", "Value": "landing_zone/" },
                      { "Name": "suffix", "Value": ".json" }
                    ]
                  }
                }
              }
            ]
          }
          EOF

          # 3) Apply notification configuration to the S3 bucket
          aws s3api put-bucket-notification-configuration \
            --bucket cicdproj-calls-env3 \
            --notification-configuration file://notification_env3.json \
            --region us-east-1
