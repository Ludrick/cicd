name: Deploy to AWS (env3)  # This workflow is named "Deploy to AWS (env3)".
on:
  push:
    branches: [main]  # Triggers on push events to the "main" branch
  workflow_dispatch:  # Allows manual triggering from the Actions tab

jobs:
  deploy_env3:
    runs-on: ubuntu-latest  # The job will run on the latest Ubuntu runner

    steps:
      - name: Checkout  # Checks out the repository code so that subsequent steps have access to it
        uses: actions/checkout@v3

      - name: Configure AWS Credentials  # Configures AWS credentials from GitHub secrets
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Needs to create the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets in the repository settings
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install or Update AWS CLI  # Installs or updates the AWS Command Line Interface
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          # Run the installer with --update
          sudo ./aws/install --update
          aws --version

      # 4) Criar bucket S3 (env3)
      - name: Create S3 bucket  # Creates an S3 bucket named "cicdproj-calls-env3"
        run: |
          aws s3api create-bucket --bucket cicdproj-calls-env3 --region us-east-1

      # 5) Criar "pastas" (prefixes) no S3
      - name: Create S3 prefixes  # Creates "landing_zone/" and "processed/" prefixes in the S3 bucket
        run: |
          aws s3api put-object --bucket cicdproj-calls-env3 --key landing_zone/
          aws s3api put-object --bucket cicdproj-calls-env3 --key processed/

      - name: Create DynamoDB table if not exists  # Creates the DynamoDB table "cicdproj_calls_bronze_env3" if it doesn't already exist
        run: |
          if aws dynamodb describe-table --table-name cicdproj_calls_bronze_env3; then
            echo "Table cicdproj_calls_bronze_env3 already exists. Skipping creation."
          else
            echo "Table does not exist. Creating now..."
            aws dynamodb create-table \
              --table-name cicdproj_calls_bronze_env3 \
              --attribute-definitions AttributeName=ip,AttributeType=S AttributeName=timestamp,AttributeType=N \
              --key-schema AttributeName=ip,KeyType=HASH AttributeName=timestamp,KeyType=RANGE \
              --billing-mode PAY_PER_REQUEST \
              --region us-east-1
          fi

      # 6) Create DynamoDB table if not exists
      - name: Create DynamoDB table if not exists  # Repeats the same creation logic (could be a duplicated step)
        run: |
          if aws dynamodb describe-table --table-name cicdproj_calls_bronze_env3; then
            echo "Table cicdproj_calls_bronze_env3 already exists. Skipping creation."
          else
            echo "Table does not exist. Creating now..."
            aws dynamodb create-table \
              --table-name cicdproj_calls_bronze_env3 \
              --attribute-definitions AttributeName=ip,AttributeType=S AttributeName=timestamp,AttributeType=N \
              --key-schema AttributeName=ip,KeyType=HASH AttributeName=timestamp,KeyType=RANGE \
              --billing-mode PAY_PER_REQUEST \
              --region us-east-1
          fi

    # 7) Build Lambda zip (includes data/bronze + data/common)
      - name: Build Lambda zip  # Builds the ZIP package containing the Lambda code and its dependencies
        run: |
          pip install --upgrade -r data/bronze/requirements.txt -t data/bronze/libs
          zip -r data/bronze/function.zip data/bronze data/common -x '*/__pycache__/*'
          echo "Contents of the ZIP file:"
          unzip -l data/bronze/function.zip

      # 8) Create or update the Lambda function
      - name: Deploy Lambda function (create or update)  # Either creates the Lambda function or updates its code
        run: |
          FUNCTION_NAME="cicdproj_calls_bronze_env3"
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating Lambda code and config for $FUNCTION_NAME ..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://data/bronze/function.zip \
              --region us-east-1

          # Wait until AWS reports the function update is complete
          aws lambda wait function-updated --function-name $FUNCTION_NAME --region us-east-1
            
            # IMPORTANT: if the function was originally created with a different handler,
            # we need to update it so that it looks for data.bronze.handler.lambda_handler
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --handler data.bronze.handler.lambda_handler \
              --region us-east-1
          else
            echo "Creating Lambda function $FUNCTION_NAME ..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.12 \
              --role arn:aws:iam::599224842127:role/lambda-exec-role-s3-dynamo \
              --handler data.bronze.handler.lambda_handler \
              --zip-file fileb://data/bronze/function.zip \
              --region us-east-1
          fi





      # 9) Configurar notificação do S3 para chamar a Lambda
      # Needs to add Lambda resource Policy to allow S3 to invoke it
      - name: Remove existing permission if it exists  # Removes any existing permission statement to avoid conflicts
        run: |
          # This command will fail if the statement doesn't exist; we ignore the error with `|| true`.
          aws lambda remove-permission \
            --function-name cicdproj_calls_bronze_env3 \
            --statement-id s3notification \
            --region us-east-1 || true
            
      - name: Configure S3 Notification  # Grants S3 permission to invoke the Lambda and sets up event notifications
        run: |
          # 1) Give S3 permission to invoke the Lambda
          aws lambda add-permission \
            --function-name cicdproj_calls_bronze_env3 \
            --principal s3.amazonaws.com \
            --action lambda:InvokeFunction \
            --statement-id s3notification \
            --source-arn arn:aws:s3:::cicdproj-calls-env3 \
            --source-account 599224842127 \
            --region us-east-1

          # 2) Wait a few seconds to ensure the permission is fully applied
          sleep 5

          # 2) Create notification configuration JSON
          cat <<EOF > notification_env3.json
          {
            "LambdaFunctionConfigurations": [
              {
                "Id": "cicdproj-calls-env3-notification",
                "LambdaFunctionArn": "arn:aws:lambda:us-east-1:599224842127:function:cicdproj_calls_bronze_env3",
                "Events": ["s3:ObjectCreated:*"],
                "Filter": {
                  "Key": {
                    "FilterRules": [
                      { "Name": "prefix", "Value": "landing_zone/" },
                      { "Name": "suffix", "Value": ".json" }
                    ]
                  }
                }
              }
            ]
          }
          EOF

          # 3) Apply notification configuration to the S3 bucket
          aws s3api put-bucket-notification-configuration \
            --bucket cicdproj-calls-env3 \
            --notification-configuration file://notification_env3.json \
            --region us-east-1
